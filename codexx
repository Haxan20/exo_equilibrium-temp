import tkinter as tk
from PIL import ImageTk, Image
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import numpy as np

# Constants
AU = 149.6e6               # Astronomical Unit in kilometers
#SolarConstant = 1361.0     # Solar constant in W/m^2
sigma = 5.67e-8            # Stefen Boltzmann Costant
Pi= np.pi
Radius= 0.0047             #Radius of the Sun


# Calculate the surface temperature of the exoplanet
def calculate_equilibrium_temperature(sigma, StellarTemp, distance, radius):
    luminosity= 4* Pi* (radius*Radius)**2 * sigma * (StellarTemp)**4
    temperature = (luminosity * (1.0 - 0.3) / (16* sigma * Pi * distance**2))**0.25
    return temperature

# Handle button click event
def calculate_temperature():
    try:
        distance = float(distance_entry.get())
        radius = float(radius_entry.get())
        StellarTemp = float(StellarTemp_entry.get())
        
            
         # Calculate the equilibrium temperature
        temperature = calculate_equilibrium_temperature(sigma, StellarTemp, distance, radius,)
         

        # Update the result label
        result_label.configure(text="Surface Temperature: {:.2f} Â°K".format(temperature))
        # Update the circle size and color
        circle_size = min(int(radius * 40), 95)
        circle_color = rgbtohex(get_rgb(temperature))
        canvas.coords(circle, 100 - circle_size, 100 - circle_size, 100 + circle_size, 100 + circle_size)
        canvas.itemconfigure(circle, width=circle_size, fill=circle_color) 

    except ValueError:
        result_label.configure(text="Invalid input. Please enter numeric values.")

# Get color based on temperature
def get_rgb(temperature):
    if temperature < 200:
        r=0
        g=0
        b=255
    elif temperature < 273:
        #Blue to cyan gradient
        r=0
        g=int(255*(temperature-200)/73)
        b=255
    elif temperature < 400:
        # Cyan to green gradient
        r = 0
        g = 255
        b = int(255 * (400 - temperature) / 127)
    elif temperature < 600:
        # Green to yellow gradient
        r = int(255 * (temperature - 400) / 199)
        g = 255
        b = 0
    else:
        # Yellow to red gradient
        r = 255
        g = max(int(255 * (1000 - temperature) / 400), 0)
        b = 0

    return (r, g, b)


def rgbtohex(rgb):
    r, g, b, = rgb
    return f"#{r:02x}{g:02x}{b:02x}"


# Bar graph

def plot_comparison():
    parameters = ['D','R', 'ST'] 
    exoplanet_values = [float(distance_entry.get()), float(radius_entry.get()), float(StellarTemp_entry.get())]
                  
    earth_values = [1.0, 1.0, 255.94]

    fig, ax = plt.subplots(figsize=(5,5))
    bar_width = 0.3  # Adjust the bar width
    
    # Set the positions of the bars
    x_pos = np.arange(len(parameters))

    ax.bar(x_pos, exoplanet_values, width=bar_width,label='Exoplanet')
    ax.bar(x_pos + bar_width, earth_values, width=bar_width, label='Earth')

    ax.set_ylabel('Values')
    ax.set_title('Exoplanet vs Earth')
    ax.set_xticks(x_pos + bar_width / 2)
    ax.set_xticklabels(parameters, rotation=45, ha='right')  # Rotate x-axis labels by 45 degrees
    ax.legend()

    # Clear previous content in the bar_canvas
    bar_canvas.delete('all')

    # Create a FigureCanvasTkAgg instance and display it in the bar_canvas
    canvas2 = FigureCanvasTkAgg(fig, master=bar_canvas)
    canvas2.draw()
    canvas2.get_tk_widget().grid(row=0, column=0)

# Create the GUI
window = tk.Tk()
window.title("Exoplanet Temperature Simulator")

# Result label
result_label = tk.Label(window, text=" ", font=("Arial", 14))
result_label.grid(row=9, column=0, columnspan=2)



# Additional Notes Box
T = tk.Text(window, height=10, width=30)
T.grid(row=0, column=0, columnspan=2, sticky=tk.W+tk.E)
quote = """This simulator gives a rough estimate for an exoplanet 
equilibrium temperature.
The host star temperature is given in unit Kelvin 
The albedo composition is only assumed to be Earth-like (0.3)"""
T.insert(tk.END, quote)
T.config(state="disabled")


# Distance input
distance_label = tk.Label(window, text="Distance (AU):")
distance_label.grid(row=1, column=0)
distance_entry = tk.Entry(window)
distance_entry.grid(row=1, column=1)

# Radius input
radius_label = tk.Label(window, text="Radius (Stellar radii with reference to the sun):")
radius_label.grid(row=2, column=0)
radius_entry = tk.Entry(window)
radius_entry.grid(row=2, column=1)

# Pressure input
StellarTemp_label = tk.Label(window, text="Stellar Temperature (kelvin)")
StellarTemp_label.grid(row=3, column=0)
StellarTemp_entry = tk.Entry(window)
StellarTemp_entry.grid(row=3, column=1)

# Calculate button
calculate_button = tk.Button(window, text="Calculate", command=calculate_temperature)
calculate_button.grid(row=8, column=0, columnspan=2)

#Plot button
plot_button = tk.Button(window, text="Plot", command=plot_comparison)
plot_button.grid(row=8, column=3)

# Circle widget
canvas = tk.Canvas(window, width=250, height=250)
circle = canvas.create_oval(100, 100, 100, 100, outline="")
canvas.grid(row=15, column=0, columnspan=3)

# Bar graph canvas
bar_canvas = tk.Canvas(window, width=250, height=250)
bar_canvas.grid(row=15, column=3, columnspan = 3)


# Start the GUI event loop
window.mainloop()
